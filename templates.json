[
    {
        "type": 1,
        "title": "Vault - Development Mode",
        "name": "dev-vault",
        "description": "Manage secrets and protect sensitive data. Create and secure access to tokens, passwords, certificates, and encryption keys.",
        "logo": "https://raw.githubusercontent.com/vsantiago113/yacht_templates/main/logos/vault-logo.png",
        "image": "vault",
        "categories": [
            "Secrets Manager"
        ],
        "platform": "linux",
        "restart_policy": "unless-stopped",
        "ports": [
            {
                "WebUI": "8200:8200/tcp"
            }
        ],
        "volumes": [
            {
                "container": "/config",
                "bind": "!config/vault"
            }
        ],
        "cap_add": [
            "IPC_LOCK"
        ],
        "env": [
            {
                "name": "VAULT_DEV_ROOT_TOKEN_ID",
                "label": "VAULT_DEV_ROOT_TOKEN_ID",
                "description": "This sets the ID of the initial generated root token to the given value",
                "default": "myroot"
            },
            {
                "name": "VAULT_DEV_LISTEN_ADDRESS",
                "label": "VAULT_DEV_LISTEN_ADDRESS",
                "description": "This sets the IP:port of the development server listener (defaults to 0.0.0.0:8200)",
                "default": "0.0.0.0:8200"
            }
        ]
    },
    {
        "type": 1,
        "title": "Vault - Server Mode",
        "name": "vault",
        "description": "Manage secrets and protect sensitive data. Create and secure access to tokens, passwords, certificates, and encryption keys.",
        "logo": "https://raw.githubusercontent.com/vsantiago113/yacht_templates/main/logos/vault-logo.png",
        "image": "vault",
        "categories": [
            "Secrets Manager"
        ],
        "platform": "linux",
        "restart_policy": "unless-stopped",
        "ports": [
            {
                "WebUI": "8200:8200/tcp"
            }
        ],
        "volumes": [
            {
                "container": "/vault/config",
                "bind": "!config/vault/config"
            },
            {
                "container": "/vault/file",
                "bind": "!data/vault/file"
            },
            {
                "container": "/vault/logs",
                "bind": "!logs/vault/logs"
            }
        ],
        "cap_add": [
            "IPC_LOCK"
        ],
        "env": [
            {
                "name": "VAULT_LOCAL_CONFIG",
                "label": "VAULT_LOCAL_CONFIG",
                "description": "This runs a Vault server using the file storage backend at path /vault/file, with a default secret lease duration of one week and a maximum of 30 days.",
                "default": "{\"listener\": {\"tcp\": {\"address\": \"0.0.0.0:8200\", \"tls_disable\": 1}}, \"backend\": {\"file\": {\"path\": \"/vault/file\"}}, \"api_addr\": \"http://0.0.0.0:8200\", \"ui\": true, \"disable_mlock\": true, \"disable_cache\": true, \"default_lease_ttl\": \"168h\", \"max_lease_ttl\": \"720h\"}"
            }
        ],
        "command": [
            "server"
        ]
    },
    {
        "type": 1,
        "title": "Portainer CE",
        "name": "portainer",
        "description": "Portainer is a centralized multi-cluster container management platform. With an intuitive UI, codified best practices, and cloud-native design templates, Portainer reduces the operational complexity of multi-cluster container management.",
        "logo": "https://raw.githubusercontent.com/vsantiago113/yacht_templates/main/logos/portainer-logo.png",
        "image": "portainer/portainer-ce:2.11.1",
        "categories": [
            "Container Management"
        ],
        "platform": "linux",
        "restart_policy": "unless-stopped",
        "ports": [
            {
                "WebUI-HTTP": "8000:8000/tcp",
                "WebUI-HTTPS": "9443:9443/tcp"
            }
        ],
        "volumes": [
            {
                "container": "/var/run/docker.sock",
                "bind": "/var/run/docker.sock"
            },
            {
                "container": "/data",
                "bind": "!data/portainer/data"
            }
        ],
        "cap_add": [
            "ALL"
        ]
    },
    {
        "type": 1,
        "title": "Jenkins",
        "name": "jenkins",
        "description": "The leading open source automation server, Jenkins provides hundreds of plugins to support building, deploying and automating any project.",
        "logo": "https://raw.githubusercontent.com/vsantiago113/yacht_templates/main/logos/jenkins-logo.png",
        "image": "jenkins/jenkins:lts-jdk11",
        "categories": [
            "Pipelines",
            "CI/CD"
        ],
        "platform": "linux",
        "restart_policy": "unless-stopped",
        "ports": [
            {
                "Inbound": "50000:50000/tcp",
                "WebUI": "8080:8080/tcp"
            }
        ],
        "volumes": [
            {
                "container": "/var/jenkins_home",
                "bind": "jenkins_home"
            }
        ]
    },
    {
        "type": 1,
        "title": "Gitlab CE",
        "name": "gitlab",
        "description": "GitLab helps you automate the builds, integration, and verification of your code. With SAST, DAST, code quality analysis, plus pipelines that enable concurrent testing and parallel execution, your teams get quick insights about every commit so they can deliver higher quality code faster.",
        "logo": "https://raw.githubusercontent.com/vsantiago113/yacht_templates/main/logos/gitlab-logo.png",
        "image": "gitlab/gitlab-ce:latest",
        "categories": [
            "Git",
            "Source Control"
        ],
        "platform": "linux",
        "restart_policy": "unless-stopped",
        "ports": [
            {
                "WebUI-HTTP": "8880:80/tcp",
                "WebUI-HTTPS": "4443:443/tcp",
                "SSH": "2224:22/tcp"
            }
        ],
        "volumes": [
            {
                "container": "/etc/gitlab",
                "bind": "!config/gitlab/config"
            },
            {
                "container": "/var/log/gitlab",
                "bind": "!logs/gitlab/logs"
            },
            {
                "container": "/var/opt/gitlab",
                "bind": "!data/gitlab/data"
            }
        ],
        "env": [
            {
                "name": "GITLAB_OMNIBUS_CONFIG",
                "label": "GITLAB_OMNIBUS_CONFIG",
                "description": "You can pre-configure the GitLab Docker image by adding the environment variable GITLAB_OMNIBUS_CONFIG to Docker run command. This variable can contain any gitlab.rb setting and is evaluated before the loading of the container's gitlab.rb file.",
                "default": "gitlab_rails['gitlab_shell_ssh_port'] = 2224"
            }
        ]
    },
    {
        "type": 1,
        "title": "Docker Registry",
        "name": "docker_registry",
        "description": "The Registry is a stateless, highly scalable server side application that stores and lets you distribute Docker images. The Registry is open-source, under the permissive Apache license.",
        "logo": "https://raw.githubusercontent.com/vsantiago113/yacht_templates/main/logos/docker_registry-logo.png",
        "image": "registry:2",
        "categories": [
            "Registry"
        ],
        "platform": "linux",
        "restart_policy": "unless-stopped",
        "ports": [
            {
                "Registry": "5000:5000/tcp"
            }
        ],
        "volumes": [
            {
                "container": "/var/lib/registry",
                "bind": "!data/docker_registry"
            }
        ]
    },
    {
        "type": 1,
        "title": "Pi-hole",
        "name": "pihole",
        "description": "",
        "logo": "https://raw.githubusercontent.com/vsantiago113/yacht_templates/main/logos/pihole-logo.png",
        "image": "pihole/pihole:latest",
        "categories": [
            "DNS",
            "DHCP",
            "Ads Block"
        ],
        "platform": "linux",
        "restart_policy": "unless-stopped",
        "ports": [
            {
                "DNS-TCP": "53:53/tcp",
                "DNS-UDP": "53:53/udp",
                "DHCP": "67:67/udp",
                "WebUI": ":80/tcp"
            }
        ],
        "volumes": [
            {
                "container": "/etc/pihole",
                "bind": "!config/pihole/etc-pihole"
            },
            {
                "container": "/etc/dnsmasq.d",
                "bind": "!config/pihole/etc-dnsmasq.d"
            }
        ],
        "cap_add": [
            "NET_ADMIN"
        ],
        "env": [
            {
                "name": "TZ",
                "label": "TZ",
                "description": "Time zone",
                "default": "America/Chicago"
            },
            {
                "name": "WEBPASSWORD",
                "label": "WEBPASSWORD",
                "description": "set a secure password here or it will be random",
                "default": "MySuperSecretAndSecureP@ssw0rd"
            }
        ]
    },
    {
        "type": 1,
        "title": "HEIMDALL",
        "name": "heimdall",
        "description": "As the name suggests Heimdall Application Dashboard is a dashboard for all your web applications. It doesn't need to be limited to applications though, you can add links to anything you like.",
        "logo": "https://raw.githubusercontent.com/vsantiago113/yacht_templates/main/logos/heimdall-logo.png",
        "image": "lscr.io/linuxserver/heimdall:latest",
        "categories": [
            "Dashboard"
        ],
        "platform": "linux",
        "restart_policy": "unless-stopped",
        "ports": [
            {
                "WebUI-HTTP": "80:80/tcp",
                "WebUI-HTTPS": "443:443/tcp"
            }
        ],
        "volumes": [
            {
                "container": "/config",
                "bind": "!config/heimdall"
            }
        ],
        "env": [
            {
                "name": "PUID",
                "label": "PUID",
                "default": "1000"
            },
            {
                "name": "PGID",
                "label": "PGID",
                "default": "1000"
            },
            {
                "name": "TZ",
                "label": "TZ",
                "description": "Time zone",
                "default": "America/Chicago"
            }
          ]
    },
    {
        "type": 1,
        "title": "PostgreSQL",
        "name": "postgres",
        "description": "PostgreSQL, often simply \"Postgres\", is an object-relational database management system (ORDBMS) with an emphasis on extensibility and standards-compliance.",
        "logo": "https://raw.githubusercontent.com/vsantiago113/yacht_templates/main/logos/postgres_logo.png",
        "image": "postgres",
        "categories": [
            "Database"
        ],
        "platform": "linux",
        "restart_policy": "unless-stopped",
        "ports": [
            {
                "DB": "5432:5432/tcp"
            }
        ],
        "env": [
            {
                "name": "POSTGRES_USER",
                "label": "POSTGRES_USER",
                "description": "This optional environment variable is used in conjunction with POSTGRES_PASSWORD to set a user and its password.",
                "default": "postgres"
            },
            {
                "name": "POSTGRES_PASSWORD",
                "label": "POSTGRES_PASSWORD",
                "description": "This environment variable is required for you to use the PostgreSQL image. It must not be empty or undefined. This environment variable sets the superuser password for PostgreSQL.",
                "default": "MySuperSecretAndSecureP@ssw0rd"
            },
            {
                "name": "POSTGRES_DB",
                "label": "POSTGRES_DB",
                "description": "This optional environment variable can be used to define a different name for the default database that is created when the image is first started.",
                "default": "postgres"
            }
          ],
        "volumes": [
            {
                "container": "/var/lib/postgresql/data",
                "bind": "!data/postgresql"
            }
        ]
    }
]